<?php
// $Id: page_view.test,v 1.1 2005/08/24 19:10:02 thomasilsche Exp $
class PageViewTest extends  DrupalTestCase {
  var $_cleanup_roles = array();
  var $_cleanup_users = array();
  
  /**
   * Implementation of get_info() for information
   */
  function get_info() {
    return array('name' => t('Page view Test'), 'desc' => t('Creates a user that has insufficient access and tries to create and access nodes. Asserts failure.') , 'group' => 'Node Tests');
  }
  
  /**
   * Create a role / perm combination specified by persmissions
   *
   * @return integer role-id
   */
  function _createRolePerm($permissions) {
    $permstring = implode(', ', $permissions);
    /* Create role */
    $role_name = $this->randomName(5, 'simpletest_');
    db_query("INSERT INTO {role} (name) VALUES ('%s')", $role_name);
    $role = db_fetch_object(db_query("SELECT * FROM {role} WHERE name = '%s'", $role_name));
    $this->assertTrue($role, " [role] created name: $role_name, id: " . (isset($role->rid) ? $role->rid : '-n/a-'));
    if ($role && !empty($role->rid)) {
      /* Create permissions */
      db_query("INSERT INTO {permission} (rid, perm) VALUES (%d, '%s')", $role->rid, $permstring);
      $this->assertTrue(db_affected_rows(), ' [role] created permissions: ' . $permstring);
      $this->_cleanup_roles[] = $role->rid;
      return $role->rid;
    } else {
      return false;
    }
  }
  
  /**
   * Creates a user / role / permissions combination specified by permissions
   *
   * @return array/boolean false if fails. fully loaded user object with added pass_raw property
   */
  function _createUserRolePerm($permissions) {
    /* Create role */
    $rid = $this->_createRolePerm($permissions);
    if (!$rid) {
      return FALSE; 
    }
    /* Create user */
    $ua = array();
    $ua['name']   = $this->randomName(5, 'simpletest_');
    $ua['mail']   = $ua['name'] . '@example.com';
    $ua['roles']  = array($rid);
    $ua['pass']   = user_password();
    $ua['status'] = 1;
    
    $u = user_save('', $ua);
    
    $this->assertTrue(!empty($u->uid), " [user] name: $ua[name] pass: $ua[pass] created");
    if (empty($u->uid)) {
      return FALSE; 
    }

    /* Add to cleanup list */
    $this->_cleanup_users[] = $u->uid;

    /* Add the raw password */
    $u->pass_raw = $ua['pass'];
    return $u;
  }
  
  /**
   * Logs in a user with the internal browser
   *
   * @param object user object with pass_raw property!
   */
  function _loginUser($user) {
    $edit = array('name' => $user->name, 'pass' => $user->pass_raw);
    $this->drupalPostRequest('user/login', $edit, 'Log in');

    $this->assertWantedText($user->name, ' [login] found name: ' . $user->name);
    $this->assertNoUnwantedText(t('The username %name has been blocked.', array('%name' => $user->name)), ' [login] not blocked');
    $this->assertNoUnwantedText(t('The name %name is a reserved username.', array('%name' => $user->name)), ' [login] not reserved');
  }
  
  /**
   * Implementation of tearDown, cleaning up created users/roles in db
   */
  function tearDown() {
    while (sizeof($this->_cleanup_roles) > 0) {
      $rid = array_pop($this->_cleanup_roles);
      db_query("DELETE FROM {role} WHERE rid = %d",       $rid);
      db_query("DELETE FROM {permission} WHERE rid = %d", $rid);
    }
    while (sizeof($this->_cleanup_users) > 0) {
      $uid = array_pop($this->_cleanup_users);
      db_query('DELETE FROM {users} WHERE uid = %d',       $uid);
      db_query('DELETE FROM {users_roles} WHERE uid = %d', $uid);
      db_query('DELETE FROM {authmap} WHERE uid = %d',     $uid);
    }
    parent::tearDown();
  }

  function testPageView() {
    /* Prepare a node to view */
    global $user, $base_url;
    $node = new stdClass();
    $node->body      = 'Simpletest ' . $this->randomName(32);
    $node->title     = 'Simpletest ' . $this->randomName(8);
    $node->teaser    = $node->body;
    $node->comment   = '2';
    $node->created   = time();
    $node->date      = format_date($node->created, 'custom', 'Y-m-d H:i:s O');
    $node->format    = '1';
    $node->moderate  = 0;
    $node->name      = $user->name;
    $node->uid       = $user->uid;
    $node->promote   = 0;
    $node->revision  = 0;
    $node->status    = '1';
    $node->sticky    = 0;
    $node->type      = 'page';
    $node->revisions = NULL;
    $node->changed   = $node->created;
    $node->taxonomy  = NULL;
    
    $this->assertTrue(node_save($node), 'Testnode created');

    /* Prepare a user to do the stuff */
    $test_user = $this->_createUserRolePerm(array());
    $this->_loginUser($test_user);
    
    $this->get($base_url . '/?q=node/view/' . $node->nid);
    $this->assertWantedText(t('You are not authorized to access this page.'), 'Acess denied for node');
    db_query('DELETE FROM {node} WHERE nid = %d', $node->nid);
  }
}
?>