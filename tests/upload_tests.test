<?php
/* $Id: upload_tests.test,v 1.2 2005/08/31 13:05:28 kubazygmunt Exp $ */
class UploadPictureTests extends DrupalTestCase {
  function get_info() {
     return array('name' => 'Testing Uploading Picture', 'desc' => 'Testing Uploading Picture Process. Uploading picture doesn\'t have to be allowed' , 'group' => 'Upload Tests');
  }

  function testUploadPicture() {
    $old_pic_set = variable_get('user_pictures', 0);
    variable_set('user_pictures', 1);

    // create test user
    $name = $this->randomName();
    $pass = $this->randomName();
    $mail = "$name@example.com";
    $edit['roles'] = array(_user_authenticated_id() => 'authenticated user');
    $user = user_save('', array('name' => $name, 'pass' => $pass, 'init' => $mail, 'mail' => $mail, 'roles' => $edit['roles'], 'status' => 1));
    //log in
    $edit = array('name' => $name, 'pass' => $pass);
    $this->drupalPostRequest('user', $edit, 'Log in' );
    // not a image
    unset($edit);
    $img_path = realpath("modules/tests/upload_tests.test");
    $edit = array('picture' => $img_path);
    $this->drupalPostRequest('user/'.$user->uid.'/edit', $edit, 'Submit' );
    $this->assertWantedText(t('The uploaded file was not an image.'), 'The uploaded file was not an image.');

    // changing actual setting;
    $old_dim = variable_get('user_picture_dimensions', '85x85');
    $old_size = variable_get('user_picture_file_size', '30');
    $img_path = realpath("modules/tests/pictureTesting.jpg");
    $info = image_get_info($img_path);
    // set new variables;
    $test_size = floor(filesize($img_path) / 1000) + 1;
    $test_dim = ($info['width'] - 10) . 'x' . ($info['height'] - 10);
    variable_set('user_picture_dimensions', $test_dim);
    variable_set('user_picture_file_size', $test_size);

     if (image_get_toolkit()) {
      // if we have gd installed drupal will scale our picture
      // invalid dimensions
      unset($edit);
      $edit = array('picture' => $img_path);
      $this->drupalPostRequest('user/'.$user->uid.'/edit', $edit, 'Submit' );

      $content = $this->_browser->getContent();
      echo $content;

      preg_match_all('~<img.*?src="?([^"]*?)"?[^>]*>~i', $content, $matches);
      $hitted = false;
      foreach ($matches[0] as $field) {
        $pos = strpos($field, 'picture-'.$user->uid.'.jpg');
        if( $pos != false) {
          $hitted = true;
          break;
        }
      }

      $this->assertEqual($hitted, true, 'Checking response on proper image');
      // check filepath

      // invalid size
      // restore one and set another
      $test_dim = ($info['width'] + 10) . 'x' . ($info['height'] + 10);
      $test_size = floor(filesize($img_path) / 1000) - 1;
      variable_set('user_picture_dimensions', $test_dim);
      variable_set('user_picture_file_size', $test_size);

      unset($edit);
      $edit = array('picture' => $img_path);
      $this->drupalPostRequest('user/'.$user->uid.'/edit', $edit, 'Submit' );
      $content = $this->_browser->getContent();

      // echo $content;
      preg_match_all('~<img.*?src="?([^"]*?)"?[^>]*>~i', $content, $matches);
      $hitted = false;
      foreach ($matches[0] as $field) {
        $pos = strpos($field, 'picture-'.$user->uid.'.jpg');
        if( $pos != false) {
          $hitted = true;
          break;
        }
      }

      $this->assertEqual($hitted, true, 'Checking response on proper image');
      // check filepath

    }
    else {
      // invalid dimensions
      unset($edit);
      $edit = array('picture' => $img_path);
      $this->drupalPostRequest('user/'.$user->uid.'/edit', $edit, 'Submit' );
      $text = t('The uploaded image is too large; the maximum dimensions are %dimensions pixels.', array('%dimensions' => variable_get('user_picture_dimensions', '85x85')));
      $this->assertWantedText($text, 'Checking response on invalid image (dimensions).');

      // invalid size
      // restore one and set another
      $test_dim = ($info['width'] + 10) . 'x' . ($info['height'] + 10);
      $test_size = floor(filesize($img_path) / 1000) - 1;
      variable_set('user_picture_dimensions', $test_dim);
      variable_set('user_picture_file_size', $test_size);

      unset($edit);
      $edit = array('picture' => $img_path);
      $this->drupalPostRequest('user/'.$user->uid.'/edit', $edit, 'Submit' );
      $text = t('The uploaded image is too large; the maximum file size is %size kB.', array('%size' => variable_get('user_picture_file_size', '30')));
      $this->assertWantedText($text, 'Checking response on invalid image size.');
    }
    // valid size & dimensions
    // restore one and set another
    $test_dim = ($info['width'] + 10) . 'x' . ($info['height'] + 10);
    $test_size = floor(filesize($img_path) / 1000) + 1;
    variable_set('user_picture_dimensions', $test_dim);
    variable_set('user_picture_file_size', $test_size);

    unset($edit);
    $edit = array('picture' => $img_path);
    $this->drupalPostRequest('user/'.$user->uid.'/edit', $edit, 'Submit' );
    $content = $this->_browser->getContent();
    preg_match_all('~<img.*?src="?([^"]*?)"?[^>]*>~i', $content, $matches);
    $hitted = false;
    foreach ($matches[0] as $field) {
      $pos = strpos($field, 'picture-'.$user->uid.'.jpg');
      if( $pos != false) {
        $hitted = true;
        break;
      }
    }
    $this->assertEqual($hitted, true, 'Checking response on proper image');
    // check filepath
    // deleting picture
    unset($edit);
    $edit = array('picture_delete' => 1);
    $this->drupalPostRequest('user/'.$user->uid.'/edit', $edit, 'Submit' );
    $content = $this->_browser->getContent();
    preg_match_all('~<img.*?src="?([^"]*?)"?[^>]*>~i', $content, $matches);
    $hitted = false;

    foreach ($matches[0] as $field) {
      $pos = strpos($field, 'picture-'.$user->uid.'.jpg');
      if( $pos != false) {
        $hitted = true;
        break;
      }
    }
    $this->assertEqual($hitted, false, "User's image deleted");

    // restore variables;
    variable_set('user_picture_file_size', $old_size);
    variable_set('user_picture_dimensions', $old_dim);

    variable_set('user_pictures', $old_pic_set);

    // do we have to check users roles?
    // delete test user and roles

    if ($user->uid > 0) {
      db_query('DELETE FROM {users} WHERE uid = %d', $user->uid);
      db_query('DELETE FROM {users_roles} WHERE uid = %d', $user->uid);
    }


  }
}

?>
