<?php
// $Id: menu_module.test,v 1.1 2007/09/22 14:35:51 rokZlender Exp $

class MenuModuleTestCase extends  DrupalTestCase {

  /**
   * Implementation of get_info() for information
   */
  function get_info() {
    return array('name' => t('Menu link creation/deletion'), 'desc' => t('Create two links in the Navigation menu, check their data, and delete them using the menu module UI.') , 'group' => 'Menu Module Tests');
  }

  function setUp() {
  }

  function testCreateCheckDelete() {

    $this->drupalModuleEnable('menu');
    $web_user = $this->drupalCreateUserRolePerm(array('access content', 'administer menu', 'access administration pages',));
    $this->drupalLoginUser($web_user);

    $mlid1 = $this->uiCreateLink();
    $mlid2 = $this->uiCreateLink($mlid1);

    $link1 = menu_link_load($mlid1);
    $this->assertTrue((bool)$link1, '1st link ceated and loaded');

    $link2 = menu_link_load($mlid2);
    $this->assertTrue((bool)$link2, '2nd link created as child and loaded');

    // Check the structure in the DB of the two links.
    // In general, if $n = $link['depth'] then $link['p'. $n] == $link['mlid'] and $link['p'. ($n - 1)] == $link['plid'] (unless depth == 0).
    // All $link['p'. $n] for $n > depth must be 0.
    // We know link1 is at the top level, so $link1['deptj'] == 1 and $link1['plid'] == 0.
    // We know that the parent of link2 is link1, so $link2['plid'] == $link1['mlid'].
    // Both links were created in the avigation menu.
    $this->assertTrue($link1['p2'] == 0 && $link1['p1'] == $mlid1 && $link1['plid'] == 0 && $link1['depth'] == 1 && $link1['has_children'], '1st link has correct data');
    $this->assertTrue($link2['menu_name'] == 'navigation' && $link2['p2'] == $mlid2 && $link2['p1'] == $mlid1 && $link2['plid'] == $mlid1 && $link2['depth'] == 2 , '2nd link has correct data');
    $this->uiDeleteLink($mlid1);
    $this->assertFalse(menu_link_load($mlid1), '1st link deleted');
    
    $link2 = menu_link_load($mlid2);
    $this->assertTrue($link2['plid'] == 0, '2nd link re-parented');
    $this->uiDeleteLink($mlid2);
    $this->assertFalse(menu_link_load($mlid2), '2nd link link deleted');
  }
  /**
   * Delete a menu link using the menu module UI.
   */
  function uiDeleteLink($mlid) {
    $this->drupalGet(url("admin/build/menu/item/". $mlid ."/delete", array('absolute' => TRUE)));
    $this->drupalPostRequest("admin/build/menu/item/". $mlid ."/delete", array(), "Confirm");
  }
  /**
   * Create a menu link using the menu module UI.
   */
  function uiCreateLink($plid = 0, $menu_name = 'navigation') {
    $this->drupalGet(url("admin/build/menu-customize/". $menu_name ."/add", array('absolute' => TRUE)));
    $this->assertResponse(200);

    $title = '!link_'. $this->randomName(16);
    $edit = array (
      'menu[link_path]' => '<front>',
      'menu[link_title]' => $title,
      'menu[description]' => '',
      'menu[parent]' =>  $menu_name.':'.$plid,
      'menu[weight]' => '0',
    );

    $this->drupalPostRequest("admin/build/menu-customize/". $menu_name ."/add", $edit, "Save");
    $out = $this->drupalGet(url("admin/build/menu-customize/". $menu_name, array('absolute' => TRUE)));
    $this->assertText($title, 'Link created');
    $mlid = db_result(db_query("SELECT mlid FROM {menu_links} WHERE link_title = '%s'", $title));

    return $mlid;
  }
}

class MenuModuleCustomMenuTest extends MenuModuleTestCase {
  var $_cleanup_roles = array();
  var $_cleanup_users = array();
  
  /**
   * Implementation of get_info() for information
   */
  function get_info() {
    return array('name' => t('Custom menu creation/deletion'), 'desc' => t('Create a custom menu, add a link to it, and delete it using the menu module UI.') , 'group' => 'Menu Module Tests');
  }

  function testCreateCheckDelete() {
    $this->drupalModuleEnable('menu');
    $web_user = $this->drupalCreateUserRolePerm(array('access content', 'administer menu', 'access administration pages',));
    $this->drupalLoginUser($web_user);

    $this->drupalGet(url("admin/build/menu/add", array('absolute' => TRUE)));
    $name = substr(md5($this->randomName(16)), 0, 20);
    $title = $this->randomName(16);
    $edit = array (
      'menu_name' => $name,
      'description' => '',
      'title' =>  $title,
    );
    $this->drupalPostRequest("admin/build/menu/add", $edit, "Save");

    $name = 'menu-' .$name;
    $this->drupalGet(url("admin/build/menu", array('absolute' => TRUE)));
    $this->assertText($title, 'Menu created');
    
    $mlid1 = $this->uiCreateLink(0, $name);
    $link1 = menu_link_load($mlid1);
    $this->assertTrue((bool)$link1, '1st link ceated and loaded');

    $this->drupalGet(url("admin/build/menu-customize/". $name ."/delete", array('absolute' => TRUE)));
    $this->drupalPostRequest("admin/build/menu-customize/". $name ."/delete", array(), "Delete");
    $this->assertFalse(menu_load($name), 'Custom menu deleted');
    $this->assertFalse(menu_link_load($mlid1), '1st link deleted with menu');
  }
}
