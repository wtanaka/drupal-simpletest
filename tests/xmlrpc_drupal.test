<?php
// $Id: xmlrpc_drupal.test,v 1.4 2006/02/04 19:37:44 thomasilsche Exp $
class XMLRPCDrupalTest extends DrupalTestCase {
  function get_info() {
    return array('name'  => 'Drupal.module',
                 'desc'  => t('Assure that ping notification and distributed auth to drupal.org behave as designed.'),
                 'group' => 'XML-RPC Tests');
  }
  
  function testDrupalPing() {
    $this->drupalModuleEnable('drupal');
    $this->drupalVariableSet('site_name',    'simpletest_ping_site_name');
    $this->drupalVariableSet('site_mail',    'simpletest_ping_site_mail@example.com');
    $this->drupalVariableSet('site_slogan',  'simpletest_ping_site_slogan');
    $this->drupalVariableSet('site_mission', 'simpletest_ping_site_mission');
    $this->drupalVariableSet('drupal_client_service', TRUE);
    /* Pinging itsself */
    $time = time();
    drupal_notify(url(NULL, NULL, NULL, TRUE) . 'xmlrpc.php');
    $r = db_result(db_query("SELECT COUNT(*) FROM {watchdog} WHERE timestamp >= %d AND type = 'client ping'", $time));
    $this->assertTrue(($r > 0), 'selfping successful');
  }
  
  function testDrupalDA() {
    $this->drupalModuleEnable('drupal');
    /* first a simple connection test */
    $h = fsockopen('drupal.org', 80);
    $this->assertNotIdentical(FALSE, $h, 'connection test to drupal.org:80 successful');
    if ($h !== FALSE) {
      fclose($h);
    }
    
    /* Please do not alter the account */
    $authname   = 'simpletest_da@drupal.org';
    $login_edit = array('name' => $authname, 'pass' => 'da_simpletest');
    $this->drupalPostRequest('user', $login_edit, 'Log in');
    
    $pname = $authname;
    $this->assertWantedText($pname, 'Logged in (name found)');
    $this->assertNoUnwantedText(t('Sorry. Unrecognized username or password.'), 'Logged in (not sorry)');
    $this->assertNoUnwantedText(t('User login'), 'Logged in (no user login form present)');
    $this->assertNoUnwantedText(t('The username %name has been blocked.', array('%name' => $pname)), 'Not blocked');
    $this->assertNoUnwantedText(t('The name %name is a reserved username.', array('%name' => $pname)), 'Access granted');

    $user = user_load(array('name' => $login_edit['name']));
    $this->assertTrue(!empty($user->uid), 'user object found in db');
    if (empty($user->uid)) {
      return FALSE; 
    }
    
    $result = db_query('SELECT uid, authname, module FROM {authmap} WHERE uid = %d', $user->uid);
    $this->assertTrue(db_num_rows($result) > 0, 'authmap found');
    if (db_num_rows($result) == 0) {
      return FALSE; 
    }
    $authmap = db_fetch_object($result);
    $this->assertEqual($authmap->uid,      $user->uid, 'authmap - uid matches');
    $this->assertEqual($authmap->authname, $authname,  'authmap - name matches');
    $this->assertEqual($authmap->module,   'drupal',   'authmap - module matches');
    
    /* logout */
    $this->clickLink('log out'); 
    $this->assertNoUnwantedText($user->name, 'Logged out');
    
    /* login again (now should be using authmap) */
    $this->drupalPostRequest('user/login', $login_edit, 'Log in');
    
    $this->assertWantedText($pname, 'Logged in (name found)');
    $this->assertNoUnwantedText(t('Sorry. Unrecognized username or password.'), 'Logged in (not sorry)');
    $this->assertNoUnwantedText(t('User login'), 'Logged in (no user login form present)');
    $this->assertNoUnwantedText(t('The username %name has been blocked.', array('%name' => $pname)), 'Not blocked');
    $this->assertNoUnwantedText(t('The name %name is a reserved username.', array('%name' => $pname)), 'Access granted');
    
    /* delete test user, roles and authmap */
    db_query('DELETE FROM {users} WHERE uid = %d', $user->uid);
    db_query('DELETE FROM {users_roles} WHERE uid = %d', $user->uid);
    db_query('DELETE FROM {authmap} WHERE uid = %d', $user->uid);
  }
}
?>