<?php
// $Id: simpletest.module,v 1.13 2006/04/30 16:15:37 thomasilsche Exp $

/**
 * Implementation of hook_help().
 */
function simpletest_help($section) {
  $output = '';

  switch ($section) {
    case 'admin/modules#description':
      $output = t("Simple unit testing suite");
      break;
    case 'admin/settings/simpletest':
      $output = '';
      break;
  }

  return $output;
}

/**
 * Implementation of hook_menu().
 */
function simpletest_menu($may_cache) {
  if ($may_cache) {
    $items = array();
    $items[] = array('path' => 'admin/simpletest', 'title' => 'simpletest',
                     'callback' => 'simpletest_entrypoint',
                     'access' => user_access('administer unit tests'));
    return $items;
  }
}

/**
 * Implementation of hook_perm().
 */
function simpletest_perm() {
  return array('administer unit tests'); 
}

/**
 * Try to load the simepletest
 * @return boolean TRUE if the load succeeded
 */
function simpletest_load() {
  static $loaded;
  if ($loaded) {
    return true; 
  }
  global $user;
  if ($user->uid != 1) {
    drupal_set_message(t('We strongly suggest running the simpletests with uid=1!'));
  }
  
  $loaded = true;
  if (!defined('SIMPLE_TEST')) {
    define('SIMPLE_TEST', drupal_get_path('module', 'simpletest'). '/simpletest'); 
  } 
  if (!is_dir(SIMPLE_TEST)){
    $output = t('Sorry but the simpletest cannot be found in the current installation. Please notice that simpletest.module needs Simpletest framework. '
              . 'Please download it from %simpletest_link and place it into the same directory as simpletest.module: %simpletest_directory',
                array('%simpletest_link' => l('Simpletest on SourceForge', 'https://sourceforge.net/project/showfiles.php?group_id=76550'),
                      '%simpletest_directory' => SIMPLE_TEST));
    drupal_set_message($output, 'error');
    return false;
  }
  
  /* We currently use only the web tester that DrupalTestCase is built upon */
  require_once(SIMPLE_TEST . '/web_tester.php');
  require_once(SIMPLE_TEST . '/reporter.php');

  if (version_compare(SimpleTest::getVersion() , '1.0.1alpha3') < 0) {
    $output = t('Due to a recently discovered %bug_link the drupal simpletest module is not compatible with versions prior to 1.0.1alpha3. '
              . 'Please download the latest version from %simpletest_link and place it into the same directory as simpletest.module: %simpletest_directory',
                array('%bug_link' => l('bug', 'http://sourceforge.net/tracker/?group_id=76550&atid=547455&func=detail&aid=1365193'),
                      '%simpletest_link' => l('Simpletest on SourceForge', 'https://sourceforge.net/project/showfiles.php?group_id=76550'),
                      '%simpletest_directory' => SIMPLE_TEST));
    drupal_set_message($output, 'error');
    return false;
  }
  

  
  $path = drupal_get_path('module', 'simpletest'). '/';
  require_once($path . 'drupal_test_case.php');
  require_once($path . 'drupal_unit_tests.php');
  return true;
}


/**
 * Menu callback for both running tests and listing possible tests
 */
function simpletest_entrypoint() {
  if (!simpletest_load()) {
    /**
     * @todo find a better way for this return,
     * currently needed to show error, true leads to page not found
     */
    return '&nbsp;';  
  }  
  $op = $_POST['op'];
  $edit = $_POST['edit'];
  if (empty($op)) {
		$op = arg(2);
	}
	switch ($op) {
		case t('Run All Tests'):
      $output  = simpletest_run_tests();
			$output .= form_submit(t('Back to Menu'));
			$output  = form($output);
  		break;
		
		case t('Run Selected Tests'):
		  $tests_list = array();
			foreach($edit as $test => $checked) {
				if ($checked && ($test != 'form_id') && ($test != 'op')) {
					$tests_list[] = $test;
				}
			}
			if (count($tests_list) > 0 ) {
				$output = simpletest_run_tests($tests_list);  	 	 
			}
			else { 
				// no test has been selected
				drupal_set_message(t('No test has been selected.'), 'error');
				$output = form_submit(t('Back to Menu'));
				$output = form($output);
			}
			break;
		default:
			$output = simpletest_overview();
  }
	print theme('page', $output);	
}

/**
 * Create menu 
 */
function simpletest_overview() {
  $output = array();
  $total_test = &simpletest_get_total_test();
  
  $test_instances = $total_test->getTestInstances();
  foreach ($test_instances as $group_test) {
    $group = array();
    $tests = $group_test->getTestInstances();
    foreach($tests as $test) {
      $test_info = $test->get_info();
      $desc = $test_info['desc'];
      $group[get_class($test)] = array('#type' => 'checkbox', '#title' => $test_info['name'], '#default_value' => 0,
                                                   '#description' => $desc);
      
    }
    $output[] = array_merge($group,
                    array('#type' => 'fieldset', '#collapsible' => TRUE, '#collapsed' => FALSE,
                          '#title' => $group_test->getLabel()));
  }
  $submit[] = array('#type' => 'submit', '#value' => t('Run All Tests'));
  $submit[] = array('#type' => 'submit', '#value' => t('Run Selected Tests'));
  $output[] = array_merge($submit,
                  array('#type' => 'fieldset', '#collapsible' => FALSE, '#collapsed' => FALSE, '#title' => 'Run tests', '#description' => t('WARNING, this may take a long time.')));
  return drupal_get_form('simpletest', $output);
}

/**
 * Actually runs tests
 * @param array $testlist list of tests to run or DEFAULT NULL run all tests
 */
function simpletest_run_tests($testlist = NULL) {
  if (!defined("TEST_RUNNING")) {
    define("TEST_RUNNING", true);
    $test = simpletest_get_total_test($testlist);
    if (SimpleReporter::inCli()) {
      cache_clear_all();
      exit ($test->run(new TextReporter()) ? 0 : 1);
    }
    $reporter = &new HtmlReporter();

    cache_clear_all();
    $test->run($reporter);
    exit;
  }
}

/**
 * Implementation of hook_simpletest().
 */
function simpletest_simpletest() {
	$dir = drupal_get_path('module', 'simpletest'). '/tests';
	$tests = file_scan_directory($dir, '\.test');
  return array_keys($tests);
}

/**
 * This function makes sure no unnecesary copies of the DrupalUnitTests object are instantiated
 * @param  array $classes list of all classes the test should concern or
 *                        DEFAULT NULL
 * @return DrupalUnitTests object
 */
function &simpletest_get_total_test($classes = NULL) {
  static $total_test;
  if (!$total_test) {
    if (!simpletest_load()) {
      return FALSE; 
    }
    $total_test = &new DrupalUnitTests();
  }
  if (!is_null($classes)) {
    return new DrupalUnitTests($classes);
  }
  return $total_test;
}