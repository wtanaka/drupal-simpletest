<?php
// $Id: simpletest.module,v 1.30 2007/12/27 08:49:25 rokZlender Exp $

/**
 * Implementation of hook_menu().
 */
function simpletest_menu() {
  $items['admin/build/simpletest'] = array( 
    'title' => 'Simpletest unit testing',
    'page callback' => 'simpletest_entrypoint',
    'description' => t('Run tests against Drupal core and your active modules. These tests help assure that your site code is working as designed.'),
    'access arguments' => array('administer unit tests'),
  );
  $items['admin/settings/simpletest'] = array( 
    'title' => t('Simpletest settings'), 
    'description' => t('Configure unit testing framework.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simpletest_settings'),
    'access arguments' => array('access administration pages'),
  );
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function simpletest_perm() {
  return array('administer unit tests'); 
}

/**
 * Try to load the simepletest
 * @return boolean TRUE if the load succeeded
 */
function simpletest_load() {
  static $loaded;
  if ($loaded) {
    return true; 
  }
  global $user;
  if ($user->uid != 1) {
    drupal_set_message(t('It is strongly suggested to run the tests with the first user!'));
  }
  $loaded = true;
  if (!defined('SIMPLE_TEST')) {
    define('SIMPLE_TEST', drupal_get_path('module', 'simpletest') .'/simpletest'); 
  }
  if (!is_dir(SIMPLE_TEST)) {
    return simpletest_trigger_error('not available');
  }
  
  // We currently use only the web tester that DrupalTestCase is built upon
  require_once(SIMPLE_TEST .'/web_tester.php');
  require_once(SIMPLE_TEST .'/reporter.php');
  require_once('drupal_reporter.php');
 
  if (version_compare(SimpleTest::getVersion(), '1.0.1beta2') < 0) {
    return simpletest_trigger_error('stale version');
  }
  
  $path = drupal_get_path('module', 'simpletest') .'/';
  require_once($path .'drupal_test_case.php');
  require_once($path .'drupal_unit_tests.php');
  return true;
}

/**
 * Menu callback for both running tests and listing possible tests
 */
function simpletest_entrypoint() {
  if (!simpletest_load()) {
     // @TODO - Find a better way for this return.  It is currently needed to show error,
     // and returning true leads to page not found
    return '&nbsp;';  
  }
  drupal_add_js(drupal_get_path('module', 'simpletest') .'/simpletest.js', 'module');
  $output = drupal_get_form('simpletest_overview_form');

  if (simpletest_running_output()) {
    return simpletest_running_output() . $output;
  }
  else {
    return $output;
  }
}

function simpletest_running_output($output = NULL) {
  static $o;
  if ($output != NULL) {
    $o = $output;
  }
  return $o;
}

/**
 * FAPI form submit for simpletest_overview_form
 *
 * @param $form
 * @param $form_state
 */
function simpletest_overview_form_submit($form, &$form_state) {
  $form_state['redirect'] = FALSE;
  $output = '';
  switch ($form_state['values']['running_options']) {
    case 'all_tests':
      $output = simpletest_run_tests();
      break;    
    case 'selected_tests':
      $tests_list = array();
      foreach ($form_state['values'] as $item => $value){
        if ($value === 1 && strpos($item, 'selectall') === FALSE) {
          $tests_list[] = $item;
        }
      }
      if (count($tests_list) > 0 ) {
        $output = simpletest_run_tests($tests_list);
        break;
      }
      // Fall through
    default:
      simpletest_trigger_error('no tests selected');
  }
  
  simpletest_running_output($output);
  return FALSE;
}

/**
 * Form callback;  make the form to run tests
 */
function simpletest_overview_form() {
  $output = array();
  
  $total_test = &simpletest_get_total_test();
  
  $test_instances = $total_test->getTestInstances();
  foreach ($test_instances as $group_test) {
    $group = array();
    $tests = $group_test->getTestInstances();
    $group_class = str_replace(' ', '-', strtolower($group_test->getLabel()));
    $group['tests'] = array(
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#title' => 'Tests',
      '#attributes' => array('class' => $group_class), 
    );
    foreach($tests as $test) {
      $test_info = $test->get_info();
      $desc = $test_info['desc'];
      $group['tests'][get_class($test)] = array(
        '#type' => 'checkbox',
        '#title' => $test_info['name'],
        '#default_value' => 0,
        '#description' => $desc,
      );
    }
    $output[] = $group + array(
      '#type' => 'fieldset',
      '#collapsible' => FALSE,
      '#title' => $group_test->getLabel(),
      '#attributes' => array('class' => 'select_all'),
    );
  }
  
  $submit['running_options'] = array(
    '#type' => 'radios',
    '#default_value' => 'selected_tests', 
    '#options' => array(
      'all_tests' => t('Run all tests (WARNING, this may take a long time)'),
      'selected_tests' => t('Run selected tests'),
    ),
  );
  $submit['op'] = array(
    '#type' => 'submit',
    '#value' => t('Begin'),
  );
  
  $output[] = $submit + array(
    '#type' => 'fieldset',
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#title' => 'Run tests',
  );
  return $output;
}


/**
 * Actually runs tests
 * @param array $testlist list of tests to run or DEFAULT NULL run all tests
 */
function simpletest_run_tests($testlist = NULL) {
  global $test_running;
  if (!$test_running) {
    $test_running = TRUE;
    $test = simpletest_get_total_test($testlist);
    if (SimpleReporter::inCli()) {
      cache_clear_all();
      exit ($test->run(new TextReporter()) ? 0 : 1);
    }
    $reporter = &new DrupalReporter();
    cache_clear_all();
    $test->run($reporter);
    $test_running = FALSE;
    return $reporter->getOutput();
  }
}

/**
 * Implementation of hook_simpletest().
 */
function simpletest_simpletest() {
  $dir = drupal_get_path('module', 'simpletest'). '/tests';
  $tests = file_scan_directory($dir, '\.test$');
  return array_keys($tests);
}

/**
 * This function makes sure no unnecesary copies of the DrupalUnitTests object are instantiated
 * @param  array $classes list of all classes the test should concern or
 *                        DEFAULT NULL
 * @return DrupalUnitTests object
 */
function &simpletest_get_total_test($classes = NULL) {
  static $total_test;
  if (!$total_test) {
    if (!simpletest_load()) {
      return FALSE; 
    }
    $total_test = &new DrupalUnitTests();
  }
  if (!is_null($classes)) {
    $dut = new DrupalUnitTests($classes);
    return $dut;
  }
  return $total_test;
}


function simpletest_settings() {
  $form = array();

  $form['http_auth'] = array(
    '#type' => 'fieldset',
    '#title' => t('HTTP authentication'),
    '#description' => t('If needed, enter a username and password for reaching your web site. This is not a drupal username/password.') .
                      t('This is a login presented by your web server. Most sites may leave this section empty.'),
  );
  $form['http_auth']['simpletest_httpauth'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use http authentication'),
    '#default_value' => variable_get('simpletest_httpauth', false),
  );
  $form['http_auth']['simpletest_httpauth_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#default_value' => variable_get('simpletest_httpauth_username', ''),
  );
  $form['http_auth']['simpletest_httpauth_pass'] = array(
    '#title' => t('Password'),
    '#type' => 'password',
    '#default_value' => variable_get('simpletest_httpauth_pass', ''),
  );
  $form['devel'] = array(
    '#type' => 'fieldset',
    '#title' => t('Devel module settings'),
    '#description' => t('Devel module can cause problems if you have query log enabled. It will output a few thousand queries and crash your browser'),
  );
  $form['devel']['simpletest_devel'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use devel query log on test result pages'),
    '#default_value' => variable_get('simpletest_devel', false),
  );
  
  return system_settings_form($form);

}

function simpletest_trigger_error($type) {
  switch ($type) {
    case 'not available':
      $output = t('The simpletest framework cannot be found in the current installation. Please note that simpletest.module needs Simpletest framework to be installed. ');
      $output .= t('Please download it from !simpletest_link and place it into the same directory as simpletest.module: %simpletest_directory', array('!simpletest_link' => l('Simpletest on SourceForge', 'https://sourceforge.net/project/showfiles.php?group_id=76550'), '%simpletest_directory' => SIMPLE_TEST));
      drupal_set_message($output, 'error');
      break;
    case 'stale version':
      $output = t('Due to a lot of refactoring done on simpletest library side. Simpletest module is not compatible with Simpletest versions lower than 1.0.1 beta2. ');
      $output .= t('Please download the latest version from !simpletest_link and place it into the same directory as simpletest.module: %simpletest_directory', array('!simpletest_link' => l('Simpletest on SourceForge', 'https://sourceforge.net/project/showfiles.php?group_id=76550'), '%simpletest_directory' => SIMPLE_TEST));
      drupal_set_message($output, 'error');
      break;
    case 'no tests selected':
      drupal_set_message(t('No test has been selected.'), 'error');
  }
  return false;
}
